import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { isValidHostname as __isValidHostname, } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, map, parseEpochTimestamp as __parseEpochTimestamp, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, serializeDateTime as __serializeDateTime, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { ChimeServiceException as __BaseException } from "../models/ChimeServiceException";
import { AccessDeniedException, BadRequestException, ConflictException, ForbiddenException, NotFoundException, ResourceLimitExceededException, ServiceFailureException, ServiceUnavailableException, ThrottledClientException, UnauthorizedClientException, UnprocessableEntityException, } from "../models/models_0";
export const se_AssociatePhoneNumbersWithVoiceConnectorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/voice-connectors/{VoiceConnectorId}");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    const query = map({
        [_o]: [, "associate-phone-numbers"],
    });
    let body;
    body = JSON.stringify(take(input, {
        E164PhoneNumbers: (_) => _json(_),
        ForceAssociate: [],
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_AssociatePhoneNumbersWithVoiceConnectorGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/voice-connector-groups/{VoiceConnectorGroupId}");
    b.p("VoiceConnectorGroupId", () => input.VoiceConnectorGroupId, "{VoiceConnectorGroupId}", false);
    const query = map({
        [_o]: [, "associate-phone-numbers"],
    });
    let body;
    body = JSON.stringify(take(input, {
        E164PhoneNumbers: (_) => _json(_),
        ForceAssociate: [],
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_AssociatePhoneNumberWithUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AccountId}/users/{UserId}");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    b.p("UserId", () => input.UserId, "{UserId}", false);
    const query = map({
        [_o]: [, "associate-phone-number"],
    });
    let body;
    body = JSON.stringify(take(input, {
        E164PhoneNumber: [],
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_AssociateSigninDelegateGroupsWithAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AccountId}");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    const query = map({
        [_o]: [, "associate-signin-delegate-groups"],
    });
    let body;
    body = JSON.stringify(take(input, {
        SigninDelegateGroups: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_BatchCreateAttendeeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/meetings/{MeetingId}/attendees");
    b.p("MeetingId", () => input.MeetingId, "{MeetingId}", false);
    const query = map({
        [_o]: [, "batch-create"],
    });
    let body;
    body = JSON.stringify(take(input, {
        Attendees: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_BatchCreateChannelMembershipCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xacb]: input[_CB],
    });
    b.bp("/channels/{ChannelArn}/memberships");
    b.p("ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
    const query = map({
        [_o]: [, "batch-create"],
    });
    let body;
    body = JSON.stringify(take(input, {
        MemberArns: (_) => _json(_),
        Type: [],
    }));
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_BatchCreateRoomMembershipCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AccountId}/rooms/{RoomId}/memberships");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    b.p("RoomId", () => input.RoomId, "{RoomId}", false);
    const query = map({
        [_o]: [, "batch-create"],
    });
    let body;
    body = JSON.stringify(take(input, {
        MembershipItemList: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_BatchDeletePhoneNumberCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/phone-numbers");
    const query = map({
        [_o]: [, "batch-delete"],
    });
    let body;
    body = JSON.stringify(take(input, {
        PhoneNumberIds: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_BatchSuspendUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AccountId}/users");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    const query = map({
        [_o]: [, "suspend"],
    });
    let body;
    body = JSON.stringify(take(input, {
        UserIdList: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_BatchUnsuspendUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AccountId}/users");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    const query = map({
        [_o]: [, "unsuspend"],
    });
    let body;
    body = JSON.stringify(take(input, {
        UserIdList: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_BatchUpdatePhoneNumberCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/phone-numbers");
    const query = map({
        [_o]: [, "batch-update"],
    });
    let body;
    body = JSON.stringify(take(input, {
        UpdatePhoneNumberRequestItems: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_BatchUpdateUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AccountId}/users");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        UpdateUserRequestItems: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts");
    let body;
    body = JSON.stringify(take(input, {
        Name: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateAppInstanceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/app-instances");
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Metadata: [],
        Name: [],
        Tags: (_) => _json(_),
    }));
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateAppInstanceAdminCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/app-instances/{AppInstanceArn}/admins");
    b.p("AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        AppInstanceAdminArn: [],
    }));
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateAppInstanceUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/app-instance-users");
    let body;
    body = JSON.stringify(take(input, {
        AppInstanceArn: [],
        AppInstanceUserId: [],
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Metadata: [],
        Name: [],
        Tags: (_) => _json(_),
    }));
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateAttendeeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/meetings/{MeetingId}/attendees");
    b.p("MeetingId", () => input.MeetingId, "{MeetingId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ExternalUserId: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateBotCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AccountId}/bots");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        DisplayName: [],
        Domain: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xacb]: input[_CB],
    });
    b.bp("/channels");
    let body;
    body = JSON.stringify(take(input, {
        AppInstanceArn: [],
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Metadata: [],
        Mode: [],
        Name: [],
        Privacy: [],
        Tags: (_) => _json(_),
    }));
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateChannelBanCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xacb]: input[_CB],
    });
    b.bp("/channels/{ChannelArn}/bans");
    b.p("ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        MemberArn: [],
    }));
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateChannelMembershipCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xacb]: input[_CB],
    });
    b.bp("/channels/{ChannelArn}/memberships");
    b.p("ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        MemberArn: [],
        Type: [],
    }));
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateChannelModeratorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xacb]: input[_CB],
    });
    b.bp("/channels/{ChannelArn}/moderators");
    b.p("ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        ChannelModeratorArn: [],
    }));
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateMediaCapturePipelineCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/media-capture-pipelines");
    let body;
    body = JSON.stringify(take(input, {
        ChimeSdkMeetingConfiguration: (_) => _json(_),
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        SinkArn: [],
        SinkType: [],
        SourceArn: [],
        SourceType: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateMeetingCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/meetings");
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ExternalMeetingId: [],
        MediaRegion: [],
        MeetingHostId: [],
        NotificationsConfiguration: (_) => _json(_),
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateMeetingDialOutCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/meetings/{MeetingId}/dial-outs");
    b.p("MeetingId", () => input.MeetingId, "{MeetingId}", false);
    let body;
    body = JSON.stringify(take(input, {
        FromPhoneNumber: [],
        JoinToken: [],
        ToPhoneNumber: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateMeetingWithAttendeesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/meetings");
    const query = map({
        [_o]: [, "create-attendees"],
    });
    let body;
    body = JSON.stringify(take(input, {
        Attendees: (_) => _json(_),
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ExternalMeetingId: [],
        MediaRegion: [],
        MeetingHostId: [],
        NotificationsConfiguration: (_) => _json(_),
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_CreatePhoneNumberOrderCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/phone-number-orders");
    let body;
    body = JSON.stringify(take(input, {
        E164PhoneNumbers: (_) => _json(_),
        ProductType: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateProxySessionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/voice-connectors/{VoiceConnectorId}/proxy-sessions");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Capabilities: (_) => _json(_),
        ExpiryMinutes: [],
        GeoMatchLevel: [],
        GeoMatchParams: (_) => _json(_),
        Name: [],
        NumberSelectionBehavior: [],
        ParticipantPhoneNumbers: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateRoomCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AccountId}/rooms");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Name: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateRoomMembershipCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AccountId}/rooms/{RoomId}/memberships");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    b.p("RoomId", () => input.RoomId, "{RoomId}", false);
    let body;
    body = JSON.stringify(take(input, {
        MemberId: [],
        Role: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateSipMediaApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/sip-media-applications");
    let body;
    body = JSON.stringify(take(input, {
        AwsRegion: [],
        Endpoints: (_) => _json(_),
        Name: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateSipMediaApplicationCallCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/sip-media-applications/{SipMediaApplicationId}/calls");
    b.p("SipMediaApplicationId", () => input.SipMediaApplicationId, "{SipMediaApplicationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        FromPhoneNumber: [],
        SipHeaders: (_) => _json(_),
        ToPhoneNumber: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateSipRuleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/sip-rules");
    let body;
    body = JSON.stringify(take(input, {
        Disabled: [],
        Name: [],
        TargetApplications: (_) => _json(_),
        TriggerType: [],
        TriggerValue: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AccountId}/users");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    const query = map({
        [_o]: [, "create"],
    });
    let body;
    body = JSON.stringify(take(input, {
        Email: [],
        UserType: [],
        Username: [],
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_CreateVoiceConnectorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/voice-connectors");
    let body;
    body = JSON.stringify(take(input, {
        AwsRegion: [],
        Name: [],
        RequireEncryption: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateVoiceConnectorGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/voice-connector-groups");
    let body;
    body = JSON.stringify(take(input, {
        Name: [],
        VoiceConnectorItems: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AccountId}");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteAppInstanceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/app-instances/{AppInstanceArn}");
    b.p("AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteAppInstanceAdminCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/app-instances/{AppInstanceArn}/admins/{AppInstanceAdminArn}");
    b.p("AppInstanceAdminArn", () => input.AppInstanceAdminArn, "{AppInstanceAdminArn}", false);
    b.p("AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteAppInstanceStreamingConfigurationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/app-instances/{AppInstanceArn}/streaming-configurations");
    b.p("AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteAppInstanceUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/app-instance-users/{AppInstanceUserArn}");
    b.p("AppInstanceUserArn", () => input.AppInstanceUserArn, "{AppInstanceUserArn}", false);
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteAttendeeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/meetings/{MeetingId}/attendees/{AttendeeId}");
    b.p("MeetingId", () => input.MeetingId, "{MeetingId}", false);
    b.p("AttendeeId", () => input.AttendeeId, "{AttendeeId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xacb]: input[_CB],
    });
    b.bp("/channels/{ChannelArn}");
    b.p("ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteChannelBanCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xacb]: input[_CB],
    });
    b.bp("/channels/{ChannelArn}/bans/{MemberArn}");
    b.p("ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
    b.p("MemberArn", () => input.MemberArn, "{MemberArn}", false);
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteChannelMembershipCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xacb]: input[_CB],
    });
    b.bp("/channels/{ChannelArn}/memberships/{MemberArn}");
    b.p("ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
    b.p("MemberArn", () => input.MemberArn, "{MemberArn}", false);
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteChannelMessageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xacb]: input[_CB],
    });
    b.bp("/channels/{ChannelArn}/messages/{MessageId}");
    b.p("ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
    b.p("MessageId", () => input.MessageId, "{MessageId}", false);
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteChannelModeratorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xacb]: input[_CB],
    });
    b.bp("/channels/{ChannelArn}/moderators/{ChannelModeratorArn}");
    b.p("ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
    b.p("ChannelModeratorArn", () => input.ChannelModeratorArn, "{ChannelModeratorArn}", false);
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteEventsConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AccountId}/bots/{BotId}/events-configuration");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    b.p("BotId", () => input.BotId, "{BotId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteMediaCapturePipelineCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/media-capture-pipelines/{MediaPipelineId}");
    b.p("MediaPipelineId", () => input.MediaPipelineId, "{MediaPipelineId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteMeetingCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/meetings/{MeetingId}");
    b.p("MeetingId", () => input.MeetingId, "{MeetingId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeletePhoneNumberCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/phone-numbers/{PhoneNumberId}");
    b.p("PhoneNumberId", () => input.PhoneNumberId, "{PhoneNumberId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteProxySessionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/voice-connectors/{VoiceConnectorId}/proxy-sessions/{ProxySessionId}");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    b.p("ProxySessionId", () => input.ProxySessionId, "{ProxySessionId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteRoomCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AccountId}/rooms/{RoomId}");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    b.p("RoomId", () => input.RoomId, "{RoomId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteRoomMembershipCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AccountId}/rooms/{RoomId}/memberships/{MemberId}");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    b.p("RoomId", () => input.RoomId, "{RoomId}", false);
    b.p("MemberId", () => input.MemberId, "{MemberId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteSipMediaApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/sip-media-applications/{SipMediaApplicationId}");
    b.p("SipMediaApplicationId", () => input.SipMediaApplicationId, "{SipMediaApplicationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteSipRuleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/sip-rules/{SipRuleId}");
    b.p("SipRuleId", () => input.SipRuleId, "{SipRuleId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteVoiceConnectorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/voice-connectors/{VoiceConnectorId}");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteVoiceConnectorEmergencyCallingConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/voice-connectors/{VoiceConnectorId}/emergency-calling-configuration");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteVoiceConnectorGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/voice-connector-groups/{VoiceConnectorGroupId}");
    b.p("VoiceConnectorGroupId", () => input.VoiceConnectorGroupId, "{VoiceConnectorGroupId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteVoiceConnectorOriginationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/voice-connectors/{VoiceConnectorId}/origination");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteVoiceConnectorProxyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/voice-connectors/{VoiceConnectorId}/programmable-numbers/proxy");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteVoiceConnectorStreamingConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/voice-connectors/{VoiceConnectorId}/streaming-configuration");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteVoiceConnectorTerminationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/voice-connectors/{VoiceConnectorId}/termination");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteVoiceConnectorTerminationCredentialsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/voice-connectors/{VoiceConnectorId}/termination/credentials");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    const query = map({
        [_o]: [, "delete"],
    });
    let body;
    body = JSON.stringify(take(input, {
        Usernames: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeAppInstanceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/app-instances/{AppInstanceArn}");
    b.p("AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeAppInstanceAdminCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/app-instances/{AppInstanceArn}/admins/{AppInstanceAdminArn}");
    b.p("AppInstanceAdminArn", () => input.AppInstanceAdminArn, "{AppInstanceAdminArn}", false);
    b.p("AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeAppInstanceUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/app-instance-users/{AppInstanceUserArn}");
    b.p("AppInstanceUserArn", () => input.AppInstanceUserArn, "{AppInstanceUserArn}", false);
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xacb]: input[_CB],
    });
    b.bp("/channels/{ChannelArn}");
    b.p("ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeChannelBanCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xacb]: input[_CB],
    });
    b.bp("/channels/{ChannelArn}/bans/{MemberArn}");
    b.p("ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
    b.p("MemberArn", () => input.MemberArn, "{MemberArn}", false);
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeChannelMembershipCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xacb]: input[_CB],
    });
    b.bp("/channels/{ChannelArn}/memberships/{MemberArn}");
    b.p("ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
    b.p("MemberArn", () => input.MemberArn, "{MemberArn}", false);
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeChannelMembershipForAppInstanceUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xacb]: input[_CB],
    });
    b.bp("/channels/{ChannelArn}");
    b.p("ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
    const query = map({
        [_s]: [, "app-instance-user-membership"],
        [_aiua]: [, __expectNonNull(input[_AIUA], `AppInstanceUserArn`)],
    });
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeChannelModeratedByAppInstanceUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xacb]: input[_CB],
    });
    b.bp("/channels/{ChannelArn}");
    b.p("ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
    const query = map({
        [_s]: [, "app-instance-user-moderated-channel"],
        [_aiua]: [, __expectNonNull(input[_AIUA], `AppInstanceUserArn`)],
    });
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeChannelModeratorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xacb]: input[_CB],
    });
    b.bp("/channels/{ChannelArn}/moderators/{ChannelModeratorArn}");
    b.p("ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
    b.p("ChannelModeratorArn", () => input.ChannelModeratorArn, "{ChannelModeratorArn}", false);
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DisassociatePhoneNumberFromUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AccountId}/users/{UserId}");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    b.p("UserId", () => input.UserId, "{UserId}", false);
    const query = map({
        [_o]: [, "disassociate-phone-number"],
    });
    let body;
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_DisassociatePhoneNumbersFromVoiceConnectorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/voice-connectors/{VoiceConnectorId}");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    const query = map({
        [_o]: [, "disassociate-phone-numbers"],
    });
    let body;
    body = JSON.stringify(take(input, {
        E164PhoneNumbers: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_DisassociatePhoneNumbersFromVoiceConnectorGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/voice-connector-groups/{VoiceConnectorGroupId}");
    b.p("VoiceConnectorGroupId", () => input.VoiceConnectorGroupId, "{VoiceConnectorGroupId}", false);
    const query = map({
        [_o]: [, "disassociate-phone-numbers"],
    });
    let body;
    body = JSON.stringify(take(input, {
        E164PhoneNumbers: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_DisassociateSigninDelegateGroupsFromAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AccountId}");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    const query = map({
        [_o]: [, "disassociate-signin-delegate-groups"],
    });
    let body;
    body = JSON.stringify(take(input, {
        GroupNames: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AccountId}");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetAccountSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AccountId}/settings");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetAppInstanceRetentionSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/app-instances/{AppInstanceArn}/retention-settings");
    b.p("AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetAppInstanceStreamingConfigurationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/app-instances/{AppInstanceArn}/streaming-configurations");
    b.p("AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetAttendeeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/meetings/{MeetingId}/attendees/{AttendeeId}");
    b.p("MeetingId", () => input.MeetingId, "{MeetingId}", false);
    b.p("AttendeeId", () => input.AttendeeId, "{AttendeeId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetBotCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AccountId}/bots/{BotId}");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    b.p("BotId", () => input.BotId, "{BotId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetChannelMessageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xacb]: input[_CB],
    });
    b.bp("/channels/{ChannelArn}/messages/{MessageId}");
    b.p("ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
    b.p("MessageId", () => input.MessageId, "{MessageId}", false);
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetEventsConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AccountId}/bots/{BotId}/events-configuration");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    b.p("BotId", () => input.BotId, "{BotId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetGlobalSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/settings");
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetMediaCapturePipelineCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/media-capture-pipelines/{MediaPipelineId}");
    b.p("MediaPipelineId", () => input.MediaPipelineId, "{MediaPipelineId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetMeetingCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/meetings/{MeetingId}");
    b.p("MeetingId", () => input.MeetingId, "{MeetingId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetMessagingSessionEndpointCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/endpoints/messaging-session");
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetPhoneNumberCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/phone-numbers/{PhoneNumberId}");
    b.p("PhoneNumberId", () => input.PhoneNumberId, "{PhoneNumberId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetPhoneNumberOrderCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/phone-number-orders/{PhoneNumberOrderId}");
    b.p("PhoneNumberOrderId", () => input.PhoneNumberOrderId, "{PhoneNumberOrderId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetPhoneNumberSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/settings/phone-number");
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetProxySessionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/voice-connectors/{VoiceConnectorId}/proxy-sessions/{ProxySessionId}");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    b.p("ProxySessionId", () => input.ProxySessionId, "{ProxySessionId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetRetentionSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AccountId}/retention-settings");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetRoomCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AccountId}/rooms/{RoomId}");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    b.p("RoomId", () => input.RoomId, "{RoomId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetSipMediaApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/sip-media-applications/{SipMediaApplicationId}");
    b.p("SipMediaApplicationId", () => input.SipMediaApplicationId, "{SipMediaApplicationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetSipMediaApplicationLoggingConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/sip-media-applications/{SipMediaApplicationId}/logging-configuration");
    b.p("SipMediaApplicationId", () => input.SipMediaApplicationId, "{SipMediaApplicationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetSipRuleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/sip-rules/{SipRuleId}");
    b.p("SipRuleId", () => input.SipRuleId, "{SipRuleId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AccountId}/users/{UserId}");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    b.p("UserId", () => input.UserId, "{UserId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetUserSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AccountId}/users/{UserId}/settings");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    b.p("UserId", () => input.UserId, "{UserId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetVoiceConnectorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/voice-connectors/{VoiceConnectorId}");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetVoiceConnectorEmergencyCallingConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/voice-connectors/{VoiceConnectorId}/emergency-calling-configuration");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetVoiceConnectorGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/voice-connector-groups/{VoiceConnectorGroupId}");
    b.p("VoiceConnectorGroupId", () => input.VoiceConnectorGroupId, "{VoiceConnectorGroupId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetVoiceConnectorLoggingConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/voice-connectors/{VoiceConnectorId}/logging-configuration");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetVoiceConnectorOriginationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/voice-connectors/{VoiceConnectorId}/origination");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetVoiceConnectorProxyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/voice-connectors/{VoiceConnectorId}/programmable-numbers/proxy");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetVoiceConnectorStreamingConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/voice-connectors/{VoiceConnectorId}/streaming-configuration");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetVoiceConnectorTerminationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/voice-connectors/{VoiceConnectorId}/termination");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetVoiceConnectorTerminationHealthCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/voice-connectors/{VoiceConnectorId}/termination/health");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_InviteUsersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AccountId}/users");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    const query = map({
        [_o]: [, "add"],
    });
    let body;
    body = JSON.stringify(take(input, {
        UserEmailList: (_) => _json(_),
        UserType: [],
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAccountsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts");
    const query = map({
        [_n]: [, input[_N]],
        [_ue]: [, input[_UE]],
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAppInstanceAdminsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/app-instances/{AppInstanceArn}/admins");
    b.p("AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
    const query = map({
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAppInstancesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/app-instances");
    const query = map({
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAppInstanceUsersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/app-instance-users");
    const query = map({
        [_aia]: [, __expectNonNull(input[_AIA], `AppInstanceArn`)],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAttendeesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/meetings/{MeetingId}/attendees");
    b.p("MeetingId", () => input.MeetingId, "{MeetingId}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAttendeeTagsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/meetings/{MeetingId}/attendees/{AttendeeId}/tags");
    b.p("MeetingId", () => input.MeetingId, "{MeetingId}", false);
    b.p("AttendeeId", () => input.AttendeeId, "{AttendeeId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListBotsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AccountId}/bots");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    const query = map({
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListChannelBansCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xacb]: input[_CB],
    });
    b.bp("/channels/{ChannelArn}/bans");
    b.p("ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
    const query = map({
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListChannelMembershipsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xacb]: input[_CB],
    });
    b.bp("/channels/{ChannelArn}/memberships");
    b.p("ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
    const query = map({
        [_t]: [, input[_T]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListChannelMembershipsForAppInstanceUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xacb]: input[_CB],
    });
    b.bp("/channels");
    const query = map({
        [_s]: [, "app-instance-user-memberships"],
        [_aiua]: [, input[_AIUA]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListChannelMessagesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xacb]: input[_CB],
    });
    b.bp("/channels/{ChannelArn}/messages");
    b.p("ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
    const query = map({
        [_so]: [, input[_SO]],
        [_nb]: [() => input.NotBefore !== void 0, () => __serializeDateTime(input[_NB]).toString()],
        [_na]: [() => input.NotAfter !== void 0, () => __serializeDateTime(input[_NA]).toString()],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListChannelModeratorsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xacb]: input[_CB],
    });
    b.bp("/channels/{ChannelArn}/moderators");
    b.p("ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
    const query = map({
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListChannelsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xacb]: input[_CB],
    });
    b.bp("/channels");
    const query = map({
        [_aia]: [, __expectNonNull(input[_AIA], `AppInstanceArn`)],
        [_p]: [, input[_P]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListChannelsModeratedByAppInstanceUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xacb]: input[_CB],
    });
    b.bp("/channels");
    const query = map({
        [_s]: [, "app-instance-user-moderated-channels"],
        [_aiua]: [, input[_AIUA]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListMediaCapturePipelinesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/media-capture-pipelines");
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListMeetingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/meetings");
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListMeetingTagsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/meetings/{MeetingId}/tags");
    b.p("MeetingId", () => input.MeetingId, "{MeetingId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListPhoneNumberOrdersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/phone-number-orders");
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListPhoneNumbersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/phone-numbers");
    const query = map({
        [_st]: [, input[_S]],
        [_pt]: [, input[_PT]],
        [_fn]: [, input[_FN]],
        [_fv]: [, input[_FV]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListProxySessionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/voice-connectors/{VoiceConnectorId}/proxy-sessions");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    const query = map({
        [_st]: [, input[_S]],
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListRoomMembershipsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AccountId}/rooms/{RoomId}/memberships");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    b.p("RoomId", () => input.RoomId, "{RoomId}", false);
    const query = map({
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListRoomsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AccountId}/rooms");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    const query = map({
        [_mi]: [, input[_MI]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListSipMediaApplicationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/sip-media-applications");
    const query = map({
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListSipRulesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/sip-rules");
    const query = map({
        [_sma]: [, input[_SMAI]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListSupportedPhoneNumberCountriesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/phone-number-countries");
    const query = map({
        [_pt]: [, __expectNonNull(input[_PT], `ProductType`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags");
    const query = map({
        [_a]: [, __expectNonNull(input[_RARN], `ResourceARN`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListUsersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AccountId}/users");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    const query = map({
        [_ue]: [, input[_UE]],
        [_ut]: [, input[_UT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListVoiceConnectorGroupsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/voice-connector-groups");
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListVoiceConnectorsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/voice-connectors");
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListVoiceConnectorTerminationCredentialsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/voice-connectors/{VoiceConnectorId}/termination/credentials");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_LogoutUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AccountId}/users/{UserId}");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    b.p("UserId", () => input.UserId, "{UserId}", false);
    const query = map({
        [_o]: [, "logout"],
    });
    let body;
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_PutAppInstanceRetentionSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/app-instances/{AppInstanceArn}/retention-settings");
    b.p("AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        AppInstanceRetentionSettings: (_) => _json(_),
    }));
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_PutAppInstanceStreamingConfigurationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/app-instances/{AppInstanceArn}/streaming-configurations");
    b.p("AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        AppInstanceStreamingConfigurations: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_PutEventsConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AccountId}/bots/{BotId}/events-configuration");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    b.p("BotId", () => input.BotId, "{BotId}", false);
    let body;
    body = JSON.stringify(take(input, {
        LambdaFunctionArn: [],
        OutboundEventsHTTPSEndpoint: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_PutRetentionSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AccountId}/retention-settings");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        RetentionSettings: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_PutSipMediaApplicationLoggingConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/sip-media-applications/{SipMediaApplicationId}/logging-configuration");
    b.p("SipMediaApplicationId", () => input.SipMediaApplicationId, "{SipMediaApplicationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        SipMediaApplicationLoggingConfiguration: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_PutVoiceConnectorEmergencyCallingConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/voice-connectors/{VoiceConnectorId}/emergency-calling-configuration");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        EmergencyCallingConfiguration: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_PutVoiceConnectorLoggingConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/voice-connectors/{VoiceConnectorId}/logging-configuration");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        LoggingConfiguration: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_PutVoiceConnectorOriginationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/voice-connectors/{VoiceConnectorId}/origination");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Origination: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_PutVoiceConnectorProxyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/voice-connectors/{VoiceConnectorId}/programmable-numbers/proxy");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        DefaultSessionExpiryMinutes: [],
        Disabled: [],
        FallBackPhoneNumber: [],
        PhoneNumberPoolCountries: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_PutVoiceConnectorStreamingConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/voice-connectors/{VoiceConnectorId}/streaming-configuration");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        StreamingConfiguration: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_PutVoiceConnectorTerminationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/voice-connectors/{VoiceConnectorId}/termination");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Termination: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_PutVoiceConnectorTerminationCredentialsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/voice-connectors/{VoiceConnectorId}/termination/credentials");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    const query = map({
        [_o]: [, "put"],
    });
    let body;
    body = JSON.stringify(take(input, {
        Credentials: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_RedactChannelMessageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xacb]: input[_CB],
    });
    b.bp("/channels/{ChannelArn}/messages/{MessageId}");
    b.p("ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
    b.p("MessageId", () => input.MessageId, "{MessageId}", false);
    const query = map({
        [_o]: [, "redact"],
    });
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_RedactConversationMessageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AccountId}/conversations/{ConversationId}/messages/{MessageId}");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    b.p("ConversationId", () => input.ConversationId, "{ConversationId}", false);
    b.p("MessageId", () => input.MessageId, "{MessageId}", false);
    const query = map({
        [_o]: [, "redact"],
    });
    let body;
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_RedactRoomMessageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AccountId}/rooms/{RoomId}/messages/{MessageId}");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    b.p("RoomId", () => input.RoomId, "{RoomId}", false);
    b.p("MessageId", () => input.MessageId, "{MessageId}", false);
    const query = map({
        [_o]: [, "redact"],
    });
    let body;
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_RegenerateSecurityTokenCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AccountId}/bots/{BotId}");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    b.p("BotId", () => input.BotId, "{BotId}", false);
    const query = map({
        [_o]: [, "regenerate-security-token"],
    });
    let body;
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_ResetPersonalPINCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AccountId}/users/{UserId}");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    b.p("UserId", () => input.UserId, "{UserId}", false);
    const query = map({
        [_o]: [, "reset-personal-pin"],
    });
    let body;
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_RestorePhoneNumberCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/phone-numbers/{PhoneNumberId}");
    b.p("PhoneNumberId", () => input.PhoneNumberId, "{PhoneNumberId}", false);
    const query = map({
        [_o]: [, "restore"],
    });
    let body;
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_SearchAvailablePhoneNumbersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/search");
    const query = map({
        [_t]: [, "phone-numbers"],
        [_ac]: [, input[_AC]],
        [_c]: [, input[_C]],
        [_co]: [, input[_Co]],
        [_sta]: [, input[_St]],
        [_tfp]: [, input[_TFP]],
        [_pnt]: [, input[_PNT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_SendChannelMessageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xacb]: input[_CB],
    });
    b.bp("/channels/{ChannelArn}/messages");
    b.p("ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Content: [],
        Metadata: [],
        Persistence: [],
        Type: [],
    }));
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartMeetingTranscriptionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/meetings/{MeetingId}/transcription");
    b.p("MeetingId", () => input.MeetingId, "{MeetingId}", false);
    const query = map({
        [_o]: [, "start"],
    });
    let body;
    body = JSON.stringify(take(input, {
        TranscriptionConfiguration: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_StopMeetingTranscriptionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/meetings/{MeetingId}/transcription");
    b.p("MeetingId", () => input.MeetingId, "{MeetingId}", false);
    const query = map({
        [_o]: [, "stop"],
    });
    let body;
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_TagAttendeeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/meetings/{MeetingId}/attendees/{AttendeeId}/tags");
    b.p("MeetingId", () => input.MeetingId, "{MeetingId}", false);
    b.p("AttendeeId", () => input.AttendeeId, "{AttendeeId}", false);
    const query = map({
        [_o]: [, "add"],
    });
    let body;
    body = JSON.stringify(take(input, {
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_TagMeetingCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/meetings/{MeetingId}/tags");
    b.p("MeetingId", () => input.MeetingId, "{MeetingId}", false);
    const query = map({
        [_o]: [, "add"],
    });
    let body;
    body = JSON.stringify(take(input, {
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags");
    const query = map({
        [_o]: [, "tag-resource"],
    });
    let body;
    body = JSON.stringify(take(input, {
        ResourceARN: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_UntagAttendeeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/meetings/{MeetingId}/attendees/{AttendeeId}/tags");
    b.p("MeetingId", () => input.MeetingId, "{MeetingId}", false);
    b.p("AttendeeId", () => input.AttendeeId, "{AttendeeId}", false);
    const query = map({
        [_o]: [, "delete"],
    });
    let body;
    body = JSON.stringify(take(input, {
        TagKeys: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_UntagMeetingCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/meetings/{MeetingId}/tags");
    b.p("MeetingId", () => input.MeetingId, "{MeetingId}", false);
    const query = map({
        [_o]: [, "delete"],
    });
    let body;
    body = JSON.stringify(take(input, {
        TagKeys: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags");
    const query = map({
        [_o]: [, "untag-resource"],
    });
    let body;
    body = JSON.stringify(take(input, {
        ResourceARN: [],
        TagKeys: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AccountId}");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        DefaultLicense: [],
        Name: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateAccountSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AccountId}/settings");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        AccountSettings: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateAppInstanceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/app-instances/{AppInstanceArn}");
    b.p("AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        Metadata: [],
        Name: [],
    }));
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateAppInstanceUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/app-instance-users/{AppInstanceUserArn}");
    b.p("AppInstanceUserArn", () => input.AppInstanceUserArn, "{AppInstanceUserArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        Metadata: [],
        Name: [],
    }));
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateBotCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AccountId}/bots/{BotId}");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    b.p("BotId", () => input.BotId, "{BotId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Disabled: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xacb]: input[_CB],
    });
    b.bp("/channels/{ChannelArn}");
    b.p("ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        Metadata: [],
        Mode: [],
        Name: [],
    }));
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateChannelMessageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xacb]: input[_CB],
    });
    b.bp("/channels/{ChannelArn}/messages/{MessageId}");
    b.p("ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
    b.p("MessageId", () => input.MessageId, "{MessageId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Content: [],
        Metadata: [],
    }));
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateChannelReadMarkerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xacb]: input[_CB],
    });
    b.bp("/channels/{ChannelArn}/readMarker");
    b.p("ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateGlobalSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/settings");
    let body;
    body = JSON.stringify(take(input, {
        BusinessCalling: (_) => _json(_),
        VoiceConnector: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdatePhoneNumberCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/phone-numbers/{PhoneNumberId}");
    b.p("PhoneNumberId", () => input.PhoneNumberId, "{PhoneNumberId}", false);
    let body;
    body = JSON.stringify(take(input, {
        CallingName: [],
        ProductType: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdatePhoneNumberSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/settings/phone-number");
    let body;
    body = JSON.stringify(take(input, {
        CallingName: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateProxySessionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/voice-connectors/{VoiceConnectorId}/proxy-sessions/{ProxySessionId}");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    b.p("ProxySessionId", () => input.ProxySessionId, "{ProxySessionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Capabilities: (_) => _json(_),
        ExpiryMinutes: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateRoomCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AccountId}/rooms/{RoomId}");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    b.p("RoomId", () => input.RoomId, "{RoomId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Name: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateRoomMembershipCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AccountId}/rooms/{RoomId}/memberships/{MemberId}");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    b.p("RoomId", () => input.RoomId, "{RoomId}", false);
    b.p("MemberId", () => input.MemberId, "{MemberId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Role: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateSipMediaApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/sip-media-applications/{SipMediaApplicationId}");
    b.p("SipMediaApplicationId", () => input.SipMediaApplicationId, "{SipMediaApplicationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Endpoints: (_) => _json(_),
        Name: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateSipMediaApplicationCallCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/sip-media-applications/{SipMediaApplicationId}/calls/{TransactionId}");
    b.p("SipMediaApplicationId", () => input.SipMediaApplicationId, "{SipMediaApplicationId}", false);
    b.p("TransactionId", () => input.TransactionId, "{TransactionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Arguments: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateSipRuleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/sip-rules/{SipRuleId}");
    b.p("SipRuleId", () => input.SipRuleId, "{SipRuleId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Disabled: [],
        Name: [],
        TargetApplications: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AccountId}/users/{UserId}");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    b.p("UserId", () => input.UserId, "{UserId}", false);
    let body;
    body = JSON.stringify(take(input, {
        AlexaForBusinessMetadata: (_) => _json(_),
        LicenseType: [],
        UserType: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateUserSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AccountId}/users/{UserId}/settings");
    b.p("AccountId", () => input.AccountId, "{AccountId}", false);
    b.p("UserId", () => input.UserId, "{UserId}", false);
    let body;
    body = JSON.stringify(take(input, {
        UserSettings: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateVoiceConnectorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/voice-connectors/{VoiceConnectorId}");
    b.p("VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Name: [],
        RequireEncryption: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateVoiceConnectorGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/voice-connector-groups/{VoiceConnectorGroupId}");
    b.p("VoiceConnectorGroupId", () => input.VoiceConnectorGroupId, "{VoiceConnectorGroupId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Name: [],
        VoiceConnectorItems: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_ValidateE911AddressCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/emergency-calling/address");
    let body;
    body = JSON.stringify(take(input, {
        AwsAccountId: [],
        City: [],
        Country: [],
        PostalCode: [],
        State: [],
        StreetInfo: [],
        StreetNumber: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_AssociatePhoneNumbersWithVoiceConnectorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        PhoneNumberErrors: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_AssociatePhoneNumbersWithVoiceConnectorGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        PhoneNumberErrors: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_AssociatePhoneNumberWithUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_AssociateSigninDelegateGroupsWithAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_BatchCreateAttendeeCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Attendees: _json,
        Errors: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchCreateChannelMembershipCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BatchChannelMemberships: _json,
        Errors: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchCreateRoomMembershipCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Errors: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchDeletePhoneNumberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        PhoneNumberErrors: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchSuspendUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        UserErrors: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchUnsuspendUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        UserErrors: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchUpdatePhoneNumberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        PhoneNumberErrors: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchUpdateUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        UserErrors: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateAccountCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Account: (_) => de_Account(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateAppInstanceCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppInstanceArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateAppInstanceAdminCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppInstanceAdmin: _json,
        AppInstanceArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateAppInstanceUserCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppInstanceUserArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateAttendeeCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Attendee: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateBotCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Bot: (_) => de_Bot(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateChannelCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ChannelArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateChannelBanCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ChannelArn: __expectString,
        Member: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateChannelMembershipCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ChannelArn: __expectString,
        Member: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateChannelModeratorCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ChannelArn: __expectString,
        ChannelModerator: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateMediaCapturePipelineCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        MediaCapturePipeline: (_) => de_MediaCapturePipeline(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateMeetingCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Meeting: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateMeetingDialOutCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        TransactionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateMeetingWithAttendeesCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Attendees: _json,
        Errors: _json,
        Meeting: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreatePhoneNumberOrderCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        PhoneNumberOrder: (_) => de_PhoneNumberOrder(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateProxySessionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ProxySession: (_) => de_ProxySession(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateRoomCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Room: (_) => de_Room(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateRoomMembershipCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RoomMembership: (_) => de_RoomMembership(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateSipMediaApplicationCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        SipMediaApplication: (_) => de_SipMediaApplication(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateSipMediaApplicationCallCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        SipMediaApplicationCall: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateSipRuleCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        SipRule: (_) => de_SipRule(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateUserCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        User: (_) => de_User(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateVoiceConnectorCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        VoiceConnector: (_) => de_VoiceConnector(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateVoiceConnectorGroupCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        VoiceConnectorGroup: (_) => de_VoiceConnectorGroup(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteAccountCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteAppInstanceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteAppInstanceAdminCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteAppInstanceStreamingConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteAppInstanceUserCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteAttendeeCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteChannelCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteChannelBanCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteChannelMembershipCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteChannelMessageCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteChannelModeratorCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteEventsConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteMediaCapturePipelineCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteMeetingCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeletePhoneNumberCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteProxySessionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteRoomCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteRoomMembershipCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteSipMediaApplicationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteSipRuleCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteVoiceConnectorCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteVoiceConnectorEmergencyCallingConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteVoiceConnectorGroupCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteVoiceConnectorOriginationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteVoiceConnectorProxyCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteVoiceConnectorStreamingConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteVoiceConnectorTerminationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteVoiceConnectorTerminationCredentialsCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DescribeAppInstanceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppInstance: (_) => de_AppInstance(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeAppInstanceAdminCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppInstanceAdmin: (_) => de_AppInstanceAdmin(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeAppInstanceUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppInstanceUser: (_) => de_AppInstanceUser(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Channel: (_) => de_Channel(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeChannelBanCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ChannelBan: (_) => de_ChannelBan(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeChannelMembershipCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ChannelMembership: (_) => de_ChannelMembership(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeChannelMembershipForAppInstanceUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ChannelMembership: (_) => de_ChannelMembershipForAppInstanceUserSummary(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeChannelModeratedByAppInstanceUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Channel: (_) => de_ChannelModeratedByAppInstanceUserSummary(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeChannelModeratorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ChannelModerator: (_) => de_ChannelModerator(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisassociatePhoneNumberFromUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociatePhoneNumbersFromVoiceConnectorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        PhoneNumberErrors: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisassociatePhoneNumbersFromVoiceConnectorGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        PhoneNumberErrors: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisassociateSigninDelegateGroupsFromAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Account: (_) => de_Account(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAccountSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AccountSettings: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAppInstanceRetentionSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppInstanceRetentionSettings: _json,
        InitiateDeletionTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAppInstanceStreamingConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppInstanceStreamingConfigurations: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAttendeeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Attendee: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetBotCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Bot: (_) => de_Bot(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetChannelMessageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ChannelMessage: (_) => de_ChannelMessage(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetEventsConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EventsConfiguration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetGlobalSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BusinessCalling: _json,
        VoiceConnector: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetMediaCapturePipelineCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        MediaCapturePipeline: (_) => de_MediaCapturePipeline(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetMeetingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Meeting: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetMessagingSessionEndpointCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Endpoint: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetPhoneNumberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        PhoneNumber: (_) => de_PhoneNumber(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetPhoneNumberOrderCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        PhoneNumberOrder: (_) => de_PhoneNumberOrder(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetPhoneNumberSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CallingName: __expectString,
        CallingNameUpdatedTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetProxySessionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ProxySession: (_) => de_ProxySession(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetRetentionSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        InitiateDeletionTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        RetentionSettings: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetRoomCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Room: (_) => de_Room(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSipMediaApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        SipMediaApplication: (_) => de_SipMediaApplication(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSipMediaApplicationLoggingConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        SipMediaApplicationLoggingConfiguration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSipRuleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        SipRule: (_) => de_SipRule(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        User: (_) => de_User(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetUserSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        UserSettings: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetVoiceConnectorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        VoiceConnector: (_) => de_VoiceConnector(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetVoiceConnectorEmergencyCallingConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EmergencyCallingConfiguration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetVoiceConnectorGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        VoiceConnectorGroup: (_) => de_VoiceConnectorGroup(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetVoiceConnectorLoggingConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LoggingConfiguration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetVoiceConnectorOriginationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Origination: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetVoiceConnectorProxyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Proxy: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetVoiceConnectorStreamingConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        StreamingConfiguration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetVoiceConnectorTerminationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Termination: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetVoiceConnectorTerminationHealthCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        TerminationHealth: (_) => de_TerminationHealth(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_InviteUsersCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Invites: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAccountsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Accounts: (_) => de_AccountList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAppInstanceAdminsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppInstanceAdmins: _json,
        AppInstanceArn: __expectString,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAppInstancesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppInstances: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAppInstanceUsersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppInstanceArn: __expectString,
        AppInstanceUsers: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAttendeesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Attendees: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAttendeeTagsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListBotsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Bots: (_) => de_BotList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListChannelBansCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ChannelArn: __expectString,
        ChannelBans: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListChannelMembershipsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ChannelArn: __expectString,
        ChannelMemberships: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListChannelMembershipsForAppInstanceUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ChannelMemberships: (_) => de_ChannelMembershipForAppInstanceUserSummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListChannelMessagesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ChannelArn: __expectString,
        ChannelMessages: (_) => de_ChannelMessageSummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListChannelModeratorsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ChannelArn: __expectString,
        ChannelModerators: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListChannelsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Channels: (_) => de_ChannelSummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListChannelsModeratedByAppInstanceUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Channels: (_) => de_ChannelModeratedByAppInstanceUserSummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListMediaCapturePipelinesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        MediaCapturePipelines: (_) => de_MediaCapturePipelineList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListMeetingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Meetings: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListMeetingTagsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPhoneNumberOrdersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        PhoneNumberOrders: (_) => de_PhoneNumberOrderList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPhoneNumbersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        PhoneNumbers: (_) => de_PhoneNumberList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListProxySessionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        ProxySessions: (_) => de_ProxySessions(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRoomMembershipsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        RoomMemberships: (_) => de_RoomMembershipList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRoomsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Rooms: (_) => de_RoomList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSipMediaApplicationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        SipMediaApplications: (_) => de_SipMediaApplicationList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSipRulesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        SipRules: (_) => de_SipRuleList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSupportedPhoneNumberCountriesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        PhoneNumberCountries: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListUsersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Users: (_) => de_UserList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListVoiceConnectorGroupsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        VoiceConnectorGroups: (_) => de_VoiceConnectorGroupList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListVoiceConnectorsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        VoiceConnectors: (_) => de_VoiceConnectorList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListVoiceConnectorTerminationCredentialsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Usernames: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_LogoutUserCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_PutAppInstanceRetentionSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppInstanceRetentionSettings: _json,
        InitiateDeletionTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutAppInstanceStreamingConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppInstanceStreamingConfigurations: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutEventsConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EventsConfiguration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutRetentionSettingsCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        InitiateDeletionTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        RetentionSettings: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutSipMediaApplicationLoggingConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        SipMediaApplicationLoggingConfiguration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutVoiceConnectorEmergencyCallingConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EmergencyCallingConfiguration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutVoiceConnectorLoggingConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LoggingConfiguration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutVoiceConnectorOriginationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Origination: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutVoiceConnectorProxyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Proxy: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutVoiceConnectorStreamingConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        StreamingConfiguration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutVoiceConnectorTerminationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Termination: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutVoiceConnectorTerminationCredentialsCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_RedactChannelMessageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ChannelArn: __expectString,
        MessageId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RedactConversationMessageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_RedactRoomMessageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_RegenerateSecurityTokenCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Bot: (_) => de_Bot(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ResetPersonalPINCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        User: (_) => de_User(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RestorePhoneNumberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        PhoneNumber: (_) => de_PhoneNumber(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SearchAvailablePhoneNumbersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        E164PhoneNumbers: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SendChannelMessageCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ChannelArn: __expectString,
        MessageId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartMeetingTranscriptionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StopMeetingTranscriptionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TagAttendeeCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TagMeetingCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagAttendeeCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagMeetingCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Account: (_) => de_Account(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateAccountSettingsCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateAppInstanceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppInstanceArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateAppInstanceUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppInstanceUserArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateBotCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Bot: (_) => de_Bot(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ChannelArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateChannelMessageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ChannelArn: __expectString,
        MessageId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateChannelReadMarkerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ChannelArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateGlobalSettingsCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdatePhoneNumberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        PhoneNumber: (_) => de_PhoneNumber(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdatePhoneNumberSettingsCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateProxySessionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ProxySession: (_) => de_ProxySession(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateRoomCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Room: (_) => de_Room(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateRoomMembershipCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RoomMembership: (_) => de_RoomMembership(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateSipMediaApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        SipMediaApplication: (_) => de_SipMediaApplication(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateSipMediaApplicationCallCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        SipMediaApplicationCall: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateSipRuleCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        SipRule: (_) => de_SipRule(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        User: (_) => de_User(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateUserSettingsCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateVoiceConnectorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        VoiceConnector: (_) => de_VoiceConnector(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateVoiceConnectorGroupCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        VoiceConnectorGroup: (_) => de_VoiceConnectorGroup(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ValidateE911AddressCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Address: _json,
        AddressExternalId: __expectString,
        CandidateAddressList: _json,
        ValidationResult: __expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.chime#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
            throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
            throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
            throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
            throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
            throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "UnprocessableEntityException":
        case "com.amazonaws.chime#UnprocessableEntityException":
            throw await de_UnprocessableEntityExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_BadRequestExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ForbiddenExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ForbiddenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceLimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceFailureExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceUnavailableExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottledClientExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottledClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_UnauthorizedClientExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new UnauthorizedClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_UnprocessableEntityExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new UnprocessableEntityException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_Account = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        AccountStatus: __expectString,
        AccountType: __expectString,
        AwsAccountId: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        DefaultLicense: __expectString,
        Name: __expectString,
        SigninDelegateGroups: _json,
        SupportedLicenses: _json,
    });
};
const de_AccountList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Account(entry, context);
    });
    return retVal;
};
const de_AppInstance = (output, context) => {
    return take(output, {
        AppInstanceArn: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Metadata: __expectString,
        Name: __expectString,
    });
};
const de_AppInstanceAdmin = (output, context) => {
    return take(output, {
        Admin: _json,
        AppInstanceArn: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_AppInstanceUser = (output, context) => {
    return take(output, {
        AppInstanceUserArn: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Metadata: __expectString,
        Name: __expectString,
    });
};
const de_AppInstanceUserMembershipSummary = (output, context) => {
    return take(output, {
        ReadMarkerTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Type: __expectString,
    });
};
const de_Bot = (output, context) => {
    return take(output, {
        BotEmail: __expectString,
        BotId: __expectString,
        BotType: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Disabled: __expectBoolean,
        DisplayName: __expectString,
        SecurityToken: __expectString,
        UpdatedTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        UserId: __expectString,
    });
};
const de_BotList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Bot(entry, context);
    });
    return retVal;
};
const de_Channel = (output, context) => {
    return take(output, {
        ChannelArn: __expectString,
        CreatedBy: _json,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastMessageTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Metadata: __expectString,
        Mode: __expectString,
        Name: __expectString,
        Privacy: __expectString,
    });
};
const de_ChannelBan = (output, context) => {
    return take(output, {
        ChannelArn: __expectString,
        CreatedBy: _json,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Member: _json,
    });
};
const de_ChannelMembership = (output, context) => {
    return take(output, {
        ChannelArn: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InvitedBy: _json,
        LastUpdatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Member: _json,
        Type: __expectString,
    });
};
const de_ChannelMembershipForAppInstanceUserSummary = (output, context) => {
    return take(output, {
        AppInstanceUserMembershipSummary: (_) => de_AppInstanceUserMembershipSummary(_, context),
        ChannelSummary: (_) => de_ChannelSummary(_, context),
    });
};
const de_ChannelMembershipForAppInstanceUserSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ChannelMembershipForAppInstanceUserSummary(entry, context);
    });
    return retVal;
};
const de_ChannelMessage = (output, context) => {
    return take(output, {
        ChannelArn: __expectString,
        Content: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastEditedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MessageId: __expectString,
        Metadata: __expectString,
        Persistence: __expectString,
        Redacted: __expectBoolean,
        Sender: _json,
        Type: __expectString,
    });
};
const de_ChannelMessageSummary = (output, context) => {
    return take(output, {
        Content: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastEditedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MessageId: __expectString,
        Metadata: __expectString,
        Redacted: __expectBoolean,
        Sender: _json,
        Type: __expectString,
    });
};
const de_ChannelMessageSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ChannelMessageSummary(entry, context);
    });
    return retVal;
};
const de_ChannelModeratedByAppInstanceUserSummary = (output, context) => {
    return take(output, {
        ChannelSummary: (_) => de_ChannelSummary(_, context),
    });
};
const de_ChannelModeratedByAppInstanceUserSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ChannelModeratedByAppInstanceUserSummary(entry, context);
    });
    return retVal;
};
const de_ChannelModerator = (output, context) => {
    return take(output, {
        ChannelArn: __expectString,
        CreatedBy: _json,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Moderator: _json,
    });
};
const de_ChannelSummary = (output, context) => {
    return take(output, {
        ChannelArn: __expectString,
        LastMessageTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Metadata: __expectString,
        Mode: __expectString,
        Name: __expectString,
        Privacy: __expectString,
    });
};
const de_ChannelSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ChannelSummary(entry, context);
    });
    return retVal;
};
const de_MediaCapturePipeline = (output, context) => {
    return take(output, {
        ChimeSdkMeetingConfiguration: _json,
        CreatedTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        MediaPipelineId: __expectString,
        SinkArn: __expectString,
        SinkType: __expectString,
        SourceArn: __expectString,
        SourceType: __expectString,
        Status: __expectString,
        UpdatedTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_MediaCapturePipelineList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MediaCapturePipeline(entry, context);
    });
    return retVal;
};
const de_PhoneNumber = (output, context) => {
    return take(output, {
        Associations: (_) => de_PhoneNumberAssociationList(_, context),
        CallingName: __expectString,
        CallingNameStatus: __expectString,
        Capabilities: _json,
        Country: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        DeletionTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        E164PhoneNumber: __expectString,
        PhoneNumberId: __expectString,
        ProductType: __expectString,
        Status: __expectString,
        Type: __expectString,
        UpdatedTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_PhoneNumberAssociation = (output, context) => {
    return take(output, {
        AssociatedTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Name: __expectString,
        Value: __expectString,
    });
};
const de_PhoneNumberAssociationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PhoneNumberAssociation(entry, context);
    });
    return retVal;
};
const de_PhoneNumberList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PhoneNumber(entry, context);
    });
    return retVal;
};
const de_PhoneNumberOrder = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        OrderedPhoneNumbers: _json,
        PhoneNumberOrderId: __expectString,
        ProductType: __expectString,
        Status: __expectString,
        UpdatedTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_PhoneNumberOrderList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PhoneNumberOrder(entry, context);
    });
    return retVal;
};
const de_ProxySession = (output, context) => {
    return take(output, {
        Capabilities: _json,
        CreatedTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        EndedTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        ExpiryMinutes: __expectInt32,
        GeoMatchLevel: __expectString,
        GeoMatchParams: _json,
        Name: __expectString,
        NumberSelectionBehavior: __expectString,
        Participants: _json,
        ProxySessionId: __expectString,
        Status: __expectString,
        UpdatedTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        VoiceConnectorId: __expectString,
    });
};
const de_ProxySessions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProxySession(entry, context);
    });
    return retVal;
};
const de_Room = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        CreatedBy: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Name: __expectString,
        RoomId: __expectString,
        UpdatedTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_RoomList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Room(entry, context);
    });
    return retVal;
};
const de_RoomMembership = (output, context) => {
    return take(output, {
        InvitedBy: __expectString,
        Member: _json,
        Role: __expectString,
        RoomId: __expectString,
        UpdatedTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_RoomMembershipList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RoomMembership(entry, context);
    });
    return retVal;
};
const de_SipMediaApplication = (output, context) => {
    return take(output, {
        AwsRegion: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Endpoints: _json,
        Name: __expectString,
        SipMediaApplicationId: __expectString,
        UpdatedTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_SipMediaApplicationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SipMediaApplication(entry, context);
    });
    return retVal;
};
const de_SipRule = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Disabled: __expectBoolean,
        Name: __expectString,
        SipRuleId: __expectString,
        TargetApplications: _json,
        TriggerType: __expectString,
        TriggerValue: __expectString,
        UpdatedTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_SipRuleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SipRule(entry, context);
    });
    return retVal;
};
const de_TerminationHealth = (output, context) => {
    return take(output, {
        Source: __expectString,
        Timestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_User = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        AlexaForBusinessMetadata: _json,
        DisplayName: __expectString,
        InvitedOn: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        LicenseType: __expectString,
        PersonalPIN: __expectString,
        PrimaryEmail: __expectString,
        PrimaryProvisionedNumber: __expectString,
        RegisteredOn: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        UserId: __expectString,
        UserInvitationStatus: __expectString,
        UserRegistrationStatus: __expectString,
        UserType: __expectString,
    });
};
const de_UserList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_User(entry, context);
    });
    return retVal;
};
const de_VoiceConnector = (output, context) => {
    return take(output, {
        AwsRegion: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Name: __expectString,
        OutboundHostName: __expectString,
        RequireEncryption: __expectBoolean,
        UpdatedTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        VoiceConnectorArn: __expectString,
        VoiceConnectorId: __expectString,
    });
};
const de_VoiceConnectorGroup = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Name: __expectString,
        UpdatedTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        VoiceConnectorGroupArn: __expectString,
        VoiceConnectorGroupId: __expectString,
        VoiceConnectorItems: _json,
    });
};
const de_VoiceConnectorGroupList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VoiceConnectorGroup(entry, context);
    });
    return retVal;
};
const de_VoiceConnectorList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VoiceConnector(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _AC = "AreaCode";
const _AIA = "AppInstanceArn";
const _AIUA = "AppInstanceUserArn";
const _C = "City";
const _CB = "ChimeBearer";
const _Co = "Country";
const _FN = "FilterName";
const _FV = "FilterValue";
const _MI = "MemberId";
const _MR = "MaxResults";
const _N = "Name";
const _NA = "NotAfter";
const _NB = "NotBefore";
const _NT = "NextToken";
const _P = "Privacy";
const _PNT = "PhoneNumberType";
const _PT = "ProductType";
const _RARN = "ResourceARN";
const _S = "Status";
const _SMAI = "SipMediaApplicationId";
const _SO = "SortOrder";
const _St = "State";
const _T = "Type";
const _TFP = "TollFreePrefix";
const _UE = "UserEmail";
const _UT = "UserType";
const _a = "arn";
const _ac = "area-code";
const _aia = "app-instance-arn";
const _aiua = "app-instance-user-arn";
const _c = "city";
const _co = "country";
const _fn = "filter-name";
const _fv = "filter-value";
const _mi = "member-id";
const _mr = "max-results";
const _n = "name";
const _na = "not-after";
const _nb = "not-before";
const _nt = "next-token";
const _o = "operation";
const _p = "privacy";
const _pnt = "phone-number-type";
const _pt = "product-type";
const _s = "scope";
const _sma = "sip-media-application";
const _so = "sort-order";
const _st = "status";
const _sta = "state";
const _t = "type";
const _tfp = "toll-free-prefix";
const _ue = "user-email";
const _ut = "user-type";
const _xacb = "x-amz-chime-bearer";
